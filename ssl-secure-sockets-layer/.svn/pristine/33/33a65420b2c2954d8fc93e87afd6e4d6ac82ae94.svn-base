\section{Bit-level Description} % Major section

Since encryption of data is one of the responsibilities of the transport
layer, it's important to mention that this is where encryption such as SSL/TLS (if used) operates. This has a very useful effect which benefits the protocol greatly: Because the transport layer is responsible for establishing connections as well, a connection will simply not be established if the security checks aren't passed.

The SSL / TLS procedure consists of two steps; the first one being authentication, and the second being encryption. Because SSL/TLS is
based on the use of certificates, certificates is a very vital part of the process. One key difference (pun intended) between SSL and TLS, is that SSL requires the \textbf{server }to prove its identity to the client, whereas TLS requires both parties to prove their identity. 

\subsection[Handshake]{\bfseries\itshape Handshake}
The first thing that needs to be done to initiate encryption is what we
call the 'handshake'. This is the first of the two processes that make up the SSL/TLS protocols, and in turn consists of several steps. 

The first step in the handshake process is called the negotiation phase.
During this phase, each packet contains a specific \textit{message type
code }[INSERT REFERENCE], which indicates what type of packet is being
sent. 

First, the client sends a 'hello' to the server, this is called the \textit{ClientHello }(message type 1).
Listed within this 'hello' message is the algorithms (\textit{Cipher Suites}) which the client supports for encryption, allowing the server to pick the strongest supported algorithm and reply with the server's equivalent to ClientHello, namely \textit{ServerHello }(message type 2), containing a random number, the protocol the server has selected from the list of suggestions from the client, a random number, the CipherSuite [INSERT REFERENCE], and compression method selected; followed by the server's x.509 certificate (message type 11) containing its public key. It's important to note that the server should always select the strongest available protocol.

When the negotiation is complete, the server will send a message indicating that it is done, called the \textit{ServerHelloDone} (message type 14) packet, to which the client will respond with a packet called the \textit{ClientKeyExchange }(message type 16). This packet contains either a \textit{PreMasterSecret }[INSERT REFERENCE] (encrypted with the public key found in the server's certificate), a public key, or nothing at all depending on the selected protocol [INSERT REFERENCE].

The random numbers contained within the \textit{ClientHello }and \textit{ServerHello }will be used to calculate a \textit{MasterSecret} together with the \textit{PreMasterSecret }in the next step. The \textit{MasterSecret }becomes a shared secret between the client and the server, which the data required for encryption will be based on.

When this is complete, both parties are ready to start encrypting data. This begins after the client sends a \textit{ChangeCipherSpec }[INSERT REFERENCE] packet, essentially indicated that \textit{{\textquotedblleft}Now is the time to change to the cipher suite we have agreed to use, with the shared secret we calculated{\textquotedblright}, }and finally a \textit{Finished }packet containing the \textit{message authentication code} [INSERT REFERENCE] and hash calculated from the previous handshake messages.

Upon receiving this from the client, the server in turn responds with a similar \textit{ChangeCipherSpec }packet indicating that it, too, is ready to start encryption of data, followed by a \textit{Finished} (message type 20) message.

\subsubsection{x.509 Certificate}
The certificate provided by the server is of the type x.509 as specified in RFC5280 (and earlier RFC2459) and updated in RFC6818. It is issued by a Certificate Authority, which [supposedly] proves the server's identity as verified by said authority, and contains a number of fields -- in this case used to verify the legitimacy of the other party, as well as generating a private key.

x.509 certificates follow a very specific structure, expressed in ASN.1 (Abstract Syntax Notation One), the structure of which we described earlier in this document.

\bigskip

\subsubsection[Generating Keys: Diffie{}-Hellman]{Generating Keys: Diffie-Hellman}
The Diffie-Hellman key exchange was published in 1976 in a ground breaking paper by Whitfield Diffie and Martin Hellman. Essentially, this algorithm is together with the DES responsible for bringing cryptography to the public eye.

The algorithm devised is a way to generate an identical shared secret without any prior secrets. The algorithm's strength is based on the \textit{discrete logarithm problem}, making it very easy to do one way, but very difficult to reverse. The process does, however, have some prerequisites; these being that the random number \textit{g} must be lower than the prime number \textit{p}, and the prime number \textit{p} must be greater than 2.

The Diffie-Hellman key exchange is based on two parties each agreeing on a randomly generated integer, and a prime integer. Once both parties have agreed on these, they generate a private integer (which must be less than the prime). 

Each party proceeds to raise the generated number to the power of their private number, modulo the prime number they both agreed on, to create their \textit{public key. }Thus, each party continues the procedure by sharing their newly created \textit{public key }with one another, and use this to calculate their \textit{shared secret}. This is done by raising the \textit{other party's }public key to the power of their \textit{private keys }modulo their agreed on prime.

For example, let's assume \textit{Alice }and \textit{Bob} agree on using a prime, \textit{p}, with the value 83, and a generated value \textit{g} of 58.


\begin{center}
\tablehead{}
\begin{supertabular}{|m{3in}|m{3in}|}
\hline
Prime number (p):  & 83\\\hline
Generated number (g):  & 58\\\hline
\end{supertabular}
\end{center}

\bigskip

\begin{flushleft}
\tablehead{}
\begin{supertabular}{|m{1.5in}|m{1.2in}m{0.2in}|m{0.2in}m{1.3in}|m{1.5in}|}
\hline
\multicolumn{3}{|m{3in}|}{\bfseries Alice} &
\multicolumn{3}{m{3in}|}{\bfseries Bob}\\\hline
Private key (a):  &
\multicolumn{2}{m{1.3in}|}{30} &
\multicolumn{2}{m{1.5in}|}{Private key (b):} & 65\\\hline
\begin{tabular}[l]{@{}c@{}}Public key \\ \textit{(g\textsuperscript{a} mod p)}\end{tabular} &
\multicolumn{2}{m{1.3in}|}{58\textsuperscript{30} mod 83 = 9} &
\multicolumn{2}{m{1.5in}|}{ \begin{tabular}[l]{@{}c@{}}Public key \\ \textit{(g\textsuperscript{b} mod p)}\end{tabular}} & 58\textsuperscript{65} mod 83 = 22\\\hline
Bob's public key \textit{B} & \multicolumn{1}{m{1in}|}{22} &
\multicolumn{2}{m{0.5in}|}{\centering \ \textbf{$\leftarrow
\rightarrow $}} & Alice's public key \textit{A} & 9\\\hline
\begin{tabular}[l]{@{}c@{}}Shared key\\\textit{(B\textsuperscript{a} mod p)}\end{tabular} &
\multicolumn{2}{m{1.5in}|}{22\textsuperscript{30} mod 83 = 29} &
\multicolumn{2}{m{1.5in}|}{ \begin{tabular}[l]{@{}c@{}}Shared key\\\textit{(A\textsuperscript{b} mod p)} \end{tabular} } &
9\textsuperscript{65} mod 83 = 29\\\hline
\multicolumn{6}{|m{6.5in}|}{\centering Shared secret: 29}\\\hline
\end{supertabular}
\end{flushleft}


\bigskip

\subsubsection[Generating Keys: DSA]{Generating Keys:
DSA}

\subsubsection[Generating Keys: RSA]{Generating Keys:
RSA}
The RSA method is similar, albeit different, from the Diffie-Hellman method -- it's similar in the sense that it's based on the exchange of public keys which are used for encryption, and using private keys for decryption.
Just as with Diffie-Hellman described above, we once again use the \textit{private key} of each party to generate the public key.

The RSA algorithm builds on the principles of modular arithmetics, and especially on two key mathematical algorithms: \textit{Euler's Totient Function} (used to calculate phi ($\phi$) of a given number), and the \textit{Euclidian algorithm} (to calculate the GCD of two given numbers). Let's see how these are used to create the key pair used for encryption the RSA way!

$\phi(i)$ of a given integer $i$ is the amount of numbers between 1 and $i-1$ that are relatively prime -- as in, the amount of number which has $1$ as its only common divisor. Furthermore, $\phi(i)$ can be easily calculated if the given integer $i$ is a product of two \textit{different} primes, as such:

$\phi(P_1*P_2) = P_1-1 * P_2-1$


For example, given the integer 39, we could calculate $\phi(39)$ like so:

$\phi(39) = \phi(3*13) = 3-1 * 13-1 = 2 * 12 = 24$

Now, \textit{Euler's Totient Theorem} states that if given two numbers that are relatively prime, then when you raise the lower number to phi of the higher and divide the result by the higher number, you should always get the remainder $1$. 
In mathematical terms, given the numbers $N$ and $M$, where $N<M$ and $\gcd(N,M)=1$, then $N^{\phi(M)} = 1 \pmod{M}$.

Now, we can also see that
$N^{\phi(M)} * N^{\phi(M)} = 1 * 1 \pmod{M}$

Which is the same expression as 
$N^{2\phi(M)} = 1 \pmod{M}$

... and so on. Because of this, we can continue to increase the factor of $\phi(M)$, and still get $1 \pmod{M}$ as the result. This means that we can generalize this equation a bit to become:

$N^{k\phi(M)} = 1 \pmod{M}$

This would mean that $N$ raised to any number $k$ which $\pmod{\phi(M)}$ would become 0 equals 1 $\pmod{M}$.

Therefore, if $\gcd(N,M) = 1, N < M$ then $N^S = 1 \pmod{M}$ when $S = 0 \pmod{\phi(M)}$

If we continue to multiply both sides of this equation with $N$, we see that $N^S * N = 1 * N \pmod{M}$ which is the same as $N^{S+1} = N \pmod{M}$

Now, if we instead find two numbers which we could multiply together to create $S+1$, we could raise $N$ to the product of those numbers to get $N$ back again; but reversing that calculation to find what those two numbers were would be a lot harder.

Consider we find $P$ and $Q$ where $P*Q = 1 \pmod{\phi(M)}$, we see that $N^{(P*Q)} = N \pmod{M}$ (remember, since $P*Q = 1 \pmod{\phi(M)}$, raising $N$ to the power of $P*Q$ is the same as raising $N$ to the power of $S+1$ as we mentioned above) and that $N^{(P*Q)} = (N^P)^Q$.

Now we have two operations here, first we have:
$N^P$
Then further raising that to the power of $Q$ will give us $N \pmod{M}$ back again, but lets stop for a bit there - let's say that the cipher text $c$ can be given from that first step; that would give us
$N^P = c \pmod{M}$

Which we could then turn back into $N \pmod{M}$ like so:
$c^Q = N \pmod{M}$

\textit{This} is the foundation of RSA. $P$ becomes our public key together with $M$, and $Q$ becomes our private key together with $M$.\\

In the equation above, we can see that raising $N$ to the public key produces the ciper text $c \pmod{M}$, and to get $N$ back we raise the cipher text $c$ to our private key $Q$ and get $N \pmod{M}$.

Let's see how this would work in a more practical sense: \\

Let's say Alice wants Bob to be able to send her encrypted messages which only Alice can decrypt. Just like we previously mentioned in the Diffie-Hellman explanation, Alice needs to calculate a public key based on her private key. But unlike in the Diffie-Hellman example, Alice does not select a completely random number. Instead, she must find \textit{two primes} to multiply together which will become $M$ - since we used the number 39 to explain $\phi$ earlier, let's work with that number again.
\begin{enumerate}
	\item Alice selects two prime numbers, $13$ and $3$, to create $M$:

\indent $M = 3*13 = 39$

	\item Alice then calculates $\phi(M)$ like so:
\indent $\phi(M) = 3-1 * 13-1 = 24$
 
	\item Alice must then find $P$ and $Q$ where $P*Q = 1 \pmod{\phi(M)}$ or:

\indent $P*Q = 1 \pmod{24}$ \\

$P$ and $Q$ must be relatively prime to $\phi(M)$ (24), which means that $\gcd(P,\phi(M)) = 1$ and $\gcd(Q,\phi(N)) = 1$. Preferably, $P$ and $Q$ should also be relatively prime to one another.\\

	\item Alice therefore lets her private key $Q = 53$ and now has the equation $ P*53 = 1 \pmod{\phi(M)}$, or $P*53 = 1 \pmod{24}$ which can be expressed as:
$P*53 = k * 24 +1$ where $k$ can be any number.

	\item Alice sees that $Q = 5$ is one of the possible solutions to this, because $5*53 = 265 = 1 \pmod{24}$. The criteria $\gcd(P,Q) = 1$ is satisfied as $\gcd(5,53) = 1$, and the greatest common divisor of $Q$ and $\phi(M)$ is $1$, and so is the greatest common divisor of $P$ and $\phi(M)$, making them relatively prime.

	\item Alice has now calculated her public key $P$ to be 5, and her private key $Q$ to be 53.

	\item Alice sends Bob her public key, which Bob can use to encrypt messages.
	
\end{enumerate} 

Once again we see that the public key cannot be used to \textit{decrypt} messages it has encrypted. However, Alice's \textit{private key} $Q$ can decrypt messages encrypted with her public key.

In a similar fashion, Bob would calculate his own public key and send to Alice, which Alice would use to encrypt \textit{her} messages to Bob, as is the basis for all public-key encryption algorithms.

\subsubsection[EC-Diffie-Hellman]{EC-Diffie-Hellman}

Whilst Diffie-Hellman as mentioned above is good, it's also rather old and people are familiar with how it works. In recent years, another field of cryptography has grown increasingly popular - namely Elliptic Curve Cryptography. Whereas in the regular version of Diffie-Hellman we have the domain parameters $p > 2$ and $g < p$, the prime number and the generated number, in the Elliptic Curve version things work slightly different.
Instead, we have the domain parameters $E$ which is the elliptic curve to use (for example p-256r1) and $G$ which is a base point on this curve.
The curves used for this all have a set of predefined parameters, and the curves themselves are predefined by the Standards for Efficient Cryptography Group, or SECG.
Whereas we won't go deep into the subject of Elliptic Curves in this report, we felt the need to mention their existence and purpose. For EC-Diffie-Hellman specifically, the difference from regular Diffie-Hellman is that knowing a curve $E$ and it's parameters, as well as a base point $G$ on this curve, the private key $Q$ becomes a randomly chosen number between $1$ and $N-1$, where $N$ is the order of $G$; and the public key $P$ becomes the product of $Q*G$. 
One great benefit of using Elliptic Curves is the amount of data that needs to be communicated and calculated; which makes it especially useful for mobile devices where computational power is limited.
For example, using Elliptic Curves we can get the same level of security as RSA with a 1024 bit long key, by using only a 160 bit sized key (https://www.rsa.com/rsalabs/node.asp?id=2245). 